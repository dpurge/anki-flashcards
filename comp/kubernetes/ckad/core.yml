- Task: |
    Utwórz przestrzeń nazw `mynamespace` i pod w tej przestrzeni nazw z obrazu `nginx`.
  Code: |
    kubectl \
      create \
        namespace mynamespace

    kubectl run nginx \
      --image=nginx \
      --restart=Never \
      -n mynamespace
- Task: |
    Utwórz z linii komend manifest YAML dla pod-a w przestrzeni nazw `mynamespace` z obrazu `nginx`.
  Code: |
    ```bash
    kubectl run nginx \
      --image=nginx \
      --restart=Never \
      --dry-run=client \
      -n mynamespace \
      -o yaml > pod.yaml
    ```

    ```yaml
    apiVersion: v1
    kind: Pod
    metadata:
      creationTimestamp: null
      labels:
        run: nginx
      name: nginx
      namespace: mynamespace
    spec:
      containers:
      - image: nginx
        imagePullPolicy: IfNotPresent
        name: nginx
        resources: {}
      dnsPolicy: ClusterFirst
      restartPolicy: Never
    status: {}
    ```

    ```bash
    kubectl create -f pod.yaml
    ```
- Task: |
    Wygeneruj manifest YAML dla pod-a z obrazu nginx i utwórz go w przestrzeni nazw `mynamespace` w jednej linii komend.
  Code: |
    kubectl run nginx \
      --image=nginx \
      --restart=Never \
      --dry-run=client \
      -o yaml | kubectl create \
        -n mynamespace -f -
- Task: |
    Utwórz pod-a z obrazu `busybox` i wykonaj w nim komendę `env`.
  Code: |
    kubectl run busybox \
      --image=busybox \
      --command \
      --restart=Never \
      -it --rm -- env
- Task: |
    Wyświetl logi z pod-a `busybox`.
  Code: |
    kubectl logs busybox
- Task: |
    Używając manifestu YAML utwórz pod-a `busybox` który wykonuje komendę `env` i wyświetl tekst który ta komenda wyświetla.
  Code: |
    ```bash
    kubectl run busybox \
      --image=busybox \
      --restart=Never \
      --dry-run=client \
      -o yaml \
      --command \
        -- env > envpod.yaml

    cat envpod.yaml
    ```

    ```YAML
    apiVersion: v1
    kind: Pod
    metadata:
      creationTimestamp: null
      labels:
        run: busybox
      name: busybox
    spec:
      containers:
      - command:
        - env
        image: busybox
        name: busybox
        resources: {}
      dnsPolicy: ClusterFirst
      restartPolicy: Never
    status: {}
    ```

    ```bash
    kubectl apply \
      -f envpod.yaml

    kubectl logs busybox
    ```
- Task: |
    Wyświetl YAML manifestu dla sytworzenia przestrzeni nazw `myns` bez stworzenia tej przestrzeni nazw.
  Code: |
    kubectl create \
      namespace myns \
      -o yaml \
      --dry-run=client
- Task: |
    Wygeneruj YAML dla ResourceQuota o nazwie `myrq` z ograniczeniem 1 CPU, 1G pamięci, 2 pod-ów.
  Code: |
    kubectl create quota myrq \
      --hard=cpu=1,memory=1G,pods=2 \
      --dry-run=client -o yaml
- Task: |
    Wyświetl listę pod-ów ze wszystkich przestrzeni nazw.
  Code: |
    kubectl get po \
      --all-namespaces

    # albo:

    kubectl get po -A
- Task: |
    Utwórz pod-a `nginx` z obrazu `nginx` i otwórz port 80.
  Code: |
    kubectl run nginx \
      --image=nginx \
      --restart=Never \
      --port=80
- Task: |
    Zmień obraz pod-a `nginx` na `nginx:1.24.0` i wyświetl jego opis i obserwuj restart pod-a.
  Code: |
    kubectl set image \
      pod/nginx nginx=nginx:1.24.0

    kubectl describe po nginx

    kubectl get po nginx -w
- Task: |
    Wyświetl obraz pod-a `nginx`.
  Code: |
    kubectl get po nginx \
      -o jsonpath='{.spec.containers[].image}{"\n"}'
- Task: |
    Wyświetl listę pod-ów z ich adresami IP, wykonaj komendę `wget` w tymczasowym podzie `busybox` by pobrać domument z `/` z adresu `10.1.1.131:80`.
  Code: |
    kubectl get po \
      -o wide
    
    kubectl run busybox \
      --image=busybox \
      --rm -it --restart=Never \
      -- wget -O- 10.1.1.131:80
- Task: |
    Pobierz adres pod-a `nginx` do zmiennej środowiskowej i użyj jej w tymczasowym podzie `busybox` do pobrania dokumentu przy użyciu `wget`.
  Code: |
    NGINX_IP=$(
      kubectl get pod nginx \
        -o jsonpath='{.status.podIP}' )

    kubectl run busybox \
      --image=busybox \
      --env="NGINX_IP=$NGINX_IP" \
      --rm -it --restart=Never \
      -- sh -c 'wget -O- $NGINX_IP:80'
- Task: |
    Jednną komendą wywołaj `wget` w tymczasowym podzie `busybox` który pobierze dokument z pod-a `nginx`.
  Code: |
    kubectl run busybox \
      --image=busybox \
      --rm -it --restart=Never \
      -- wget -O- $(
        kubectl get pod nginx \
          -o jsonpath='{.status.podIP}:{.spec.containers[0].ports[0].containerPort}')
- Task: |
    Pobierz manifest YAML pod-a `nginx`.
  Code: |
    kubectl get po \
      nginx --output=yaml
- Task: |
    Wyświetl opis pod-a `nginx`.
  Code: |
    kubectl describe po nginx
- Task: |
    Wyświetl log pod-a `nginx`.
  Code: |
    kubectl logs nginx
- Task: |
    Pobierz logi z poprzedniej (przed restartem) instancji pod-a `nginx`.
  Code: |
    kubectl logs nginx --previous
- Task: |
    Otwórz interaktywną sesję shell-a w podzie `nginx`.
  Code: |
    kubectl exec \
      -it nginx \
      -- /bin/sh
- Task: |
    Uruchom pod-a `busybox` który wypisze `hello world` i zakończy działanie.
  Code: |
    kubectl run busybox \
      --image=busybox \
      -it --restart=Never \
        -- echo 'hello world'
- Task: |
    Wykonaj komendę w tymczasowym podzie `busybox` która wypisze `hello world`.
    Pod po wykonaniu komendy powinien zostać usunięty.
  Code: |
    kubectl run busybox \
      --image=busybox -it --rm \
      --restart=Never \
      -- /bin/sh -c 'echo hello world'
- Task: |
    Create pod-a `nginx` i ustaw w nim zmienną środowiskową `var1` z wartością `val1`.
    Sprawdź, że zmienna została utworzona.
  Code: |
    kubectl run nginx \
      --image=nginx \
      --restart=Never \
      --env=var1=val1

    kubectl describe po nginx \
      | grep val1

    # albo:

    kubectl exec -it nginx -- env
